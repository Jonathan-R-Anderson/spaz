>>> ./output.txt
>>> ./tests/__init__.py
>>> ./utils/__init__.py
>>> ./driver.py
from api import create_app
from system.logging import setup_logger

setup_logger()
app = create_app()

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
>>> ./Dockerfile
FROM python:3.11-slim
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    krb5-kdc krb5-admin-server krb5-config \
    python3-venv && rm -rf /var/lib/apt/lists/*

# Set up Python environment
RUN python3 -m venv /venv
ENV PATH="/venv/bin:$PATH"

COPY system/requirements.txt .
RUN pip install --upgrade pip && pip install -r requirements.txt

# Copy application files
COPY . .

# Mount persistent volumes
VOLUME ["/var/lib/krb5kdc", "/etc/krb5kdc", "/kerberos/output"]

CMD ["python", "driver.py"]
>>> ./config.py
import os
from dotenv import load_dotenv

load_dotenv()

class KerberosConfig:
    def __init__(self):
        self.REALM = os.getenv("REALM", "EXAMPLE.COM").upper()
        self.DOMAIN = os.getenv("DOMAIN", "vpn.localhost").lower()
        self.PRINCIPAL = os.getenv("PRINCIPAL", f"HTTP/{self.DOMAIN}@{self.REALM}")
        self.KEYTAB_PATH = os.getenv("KEYTAB_PATH", "/kerberos/output/service.keytab")
        self.MASTER_PASS = os.getenv("KRB5_MASTER_PASSWORD")

        self._validate()

    def _validate(self):
        if not self.MASTER_PASS:
            raise ValueError("❌ KRB5_MASTER_PASSWORD must be set in .env")>>> ./system/requirements.txt
flask
flask-restful
python-dotenv
>>> ./system/__init__.py
>>> ./api/__init__.py
from flask import Flask
from api.routes.kerberos import kerberos_bp
from api.routes.federated import federated_bp

def create_app():
    app = Flask(__name__)
    app.register_blueprint(kerberos_bp)
    app.register_blueprint(federated_bp)
    return app
>>> ./api/routes/federated.py
import uuid
import os
from flask import Blueprint, render_template, request



federations = {}
systems = {}

# ---------------------------
# Utilities
# ---------------------------
def generate_id():
    return str(uuid.uuid4())

# ---------------------------
# 1. Join Existing Federation
# ---------------------------
@app.route('/federate/join', methods=['POST'])
def join_federation():
    data = request.json
    federation_id = data.get("federation_id")
    system_name = data.get("name")
    address = data.get("address")
    public_key = data.get("public_key")

    if federation_id not in federations:
        return jsonify({"error": "Federation not found"}), 404

    system_id = generate_id()
    systems[system_id] = {
        "name": system_name,
        "address": address,
        "public_key": public_key,
        "federation_id": federation_id
    }
    federations[federation_id]["members"].append(system_id)

    return jsonify({"message": "Joined federation", "system_id": system_id})

# ---------------------------
# 2. Deploy Standalone System
# ---------------------------
@app.route('/federate/standalone', methods=['POST'])
def create_standalone():
    data = request.json
    system_id = generate_id()
    systems[system_id] = {
        "name": data.get("name"),
        "address": data.get("address"),
        "public_key": data.get("public_key"),
        "federation_id": None
    }
    return jsonify({"message": "Standalone system deployed", "system_id": system_id})

# ---------------------------
# 3. Create New Federation
# ---------------------------
@app.route('/federate/create', methods=['POST'])
def create_federation():
    data = request.json
    federation_id = generate_id()
    creator_id = generate_id()

    federations[federation_id] = {
        "name": data.get("federation_name"),
        "creator": creator_id,
        "members": [creator_id]
    }

    systems[creator_id] = {
        "name": data.get("name"),
        "address": data.get("address"),
        "public_key": data.get("public_key"),
        "federation_id": federation_id
    }

    return jsonify({
        "message": "New federation created",
        "federation_id": federation_id,
        "creator_system_id": creator_id
    })

# ---------------------------
# View All Federations
# ---------------------------
@app.route('/federate/list', methods=['GET'])
def list_federations():
    return jsonify(federations)

# ---------------------------
# View All Systems
# ---------------------------
@app.route('/federate/systems', methods=['GET'])
def list_systems():
    return jsonify(systems)

if __name__ == '__main__':
    app.run(debug=True, port=5000)
>>> ./api/routes/__init__.py
>>> ./api/routes/kerberos.py
from flask import Blueprint, jsonify
from services.kerberos import write_conf, init_kdc, create_principal

kerberos_bp = Blueprint("kerberos", __name__)

@kerberos_bp.route('/kerberos/write_conf', methods=['POST'])
def write_krb5_conf_route():
    return jsonify(write_conf())

@kerberos_bp.route('/kerberos/init_kdc', methods=['POST'])
def init_kdc_route():
    return jsonify(init_kdc())

@kerberos_bp.route('/kerberos/create_principal', methods=['POST'])
def create_principal_route():
    return jsonify(create_principal())
>>> ./services/__init__.py
>>> ./services/kerberos.py
import os
import subprocess
from config import REALM, DOMAIN, PRINCIPAL, KEYTAB_PATH, MASTER_PASS

def write_conf():
    path = "/kerberos/output/krb5.conf"
    if os.path.isfile(path):
        os.remove(path)

    content = f"""
[libdefaults]
    default_realm = {REALM}
    dns_lookup_realm = false
    dns_lookup_kdc = false

[realms]
    {REALM} = {{
        kdc = localhost
        admin_server = localhost
    }}

[domain_realm]
    .{REALM.lower()} = {REALM}
    {REALM.lower()} = {REALM}
"""
    with open(path, "w") as f:
        f.write(content)
    os.chmod(path, 0o644)
    return {"message": "krb5.conf written", "path": path}


def init_kdc():
    stash_path = f"/etc/krb5kdc/.k5.{REALM}"
    db_base = "/var/lib/krb5kdc/principal"
    deleted = []

    if not os.path.exists(stash_path):
        for suffix in ["", ".ok", ".kadm5", ".kadm5.lock", ".db"]:
            try:
                path = f"{db_base}{suffix}"
                os.remove(path)
                deleted.append(path)
            except FileNotFoundError:
                continue
        subprocess.run(["kdb5_util", "create", "-s", "-P", MASTER_PASS], check=True)
        return {"message": "KDC database created", "deleted": deleted}
    return {"message": "Stash file exists, skipping creation", "stash_path": stash_path}


def create_principal():
    subprocess.run(["kadmin.local", "-q", f"addprinc -randkey {PRINCIPAL}"], check=True)
    subprocess.run(["kadmin.local", "-q", f"ktadd -k {KEYTAB_PATH} {PRINCIPAL}"], check=True)
    os.chmod(KEYTAB_PATH, 0o644)
    return {"message": "Principal created", "keytab_path": KEYTAB_PATH}
